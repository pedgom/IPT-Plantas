/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/ecommerce/sales/save-order.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/ecommerce/sales/save-order.js ***!
  \****************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTAppEcommerceSalesSaveOrder = function () {\n  // Shared variables\n  var table;\n  var datatable; // Private functions\n\n  var initSaveOrder = function initSaveOrder() {\n    // Init flatpickr\n    $('#kt_ecommerce_edit_order_date').flatpickr({\n      altInput: true,\n      altFormat: \"d F, Y\",\n      dateFormat: \"Y-m-d\"\n    }); // Init select2 country options\n    // Format options\n\n    var optionFormat = function optionFormat(item) {\n      if (!item.id) {\n        return item.text;\n      }\n\n      var span = document.createElement('span');\n      var template = '';\n      template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n      template += item.text;\n      span.innerHTML = template;\n      return $(span);\n    }; // Init Select2 --- more info: https://select2.org/        \n\n\n    $('#kt_ecommerce_edit_order_billing_country').select2({\n      placeholder: \"Select a country\",\n      minimumResultsForSearch: Infinity,\n      templateSelection: optionFormat,\n      templateResult: optionFormat\n    });\n    $('#kt_ecommerce_edit_order_shipping_country').select2({\n      placeholder: \"Select a country\",\n      minimumResultsForSearch: Infinity,\n      templateSelection: optionFormat,\n      templateResult: optionFormat\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    table = document.querySelector('#kt_ecommerce_edit_order_product_table');\n    datatable = $(table).DataTable({\n      'order': [],\n      \"scrollY\": \"400px\",\n      \"scrollCollapse\": true,\n      \"paging\": false,\n      \"info\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      } // Disable ordering on column 0 (checkbox)\n      ]\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-ecommerce-edit-order-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Handle shipping form\n\n\n  var handleShippingForm = function handleShippingForm() {\n    // Select elements\n    var element = document.getElementById('kt_ecommerce_edit_order_shipping_form');\n    var checkbox = document.getElementById('same_as_billing'); // Show/hide shipping form\n\n    checkbox.addEventListener('change', function (e) {\n      if (e.target.checked) {\n        element.classList.add('d-none');\n      } else {\n        element.classList.remove('d-none');\n      }\n    });\n  }; // Handle product select\n\n\n  var handleProductSelect = function handleProductSelect() {\n    // Define variables\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n    var target = document.getElementById('kt_ecommerce_edit_order_selected_products');\n    var totalPrice = document.getElementById('kt_ecommerce_edit_order_total_price'); // Loop through all checked products\n\n    checkboxes.forEach(function (checkbox) {\n      checkbox.addEventListener('change', function (e) {\n        var _product$classList, _product$classList2, _innerWrapper$classLi, _innerWrapper$classLi2;\n\n        // Select parent row element\n        var parent = checkbox.closest('tr'); // Clone parent element as variable\n\n        var product = parent.querySelector('[data-kt-ecommerce-edit-order-filter=\"product\"]').cloneNode(true); // Create inner wrapper\n\n        var innerWrapper = document.createElement('div'); // Store inner content\n\n        var innerContent = product.innerHTML; // Add & remove classes on parent wrapper\n\n        var wrapperClassesAdd = ['col', 'my-2'];\n        var wrapperClassesRemove = ['d-flex', 'align-items-center']; // Define additional classes\n\n        var additionalClasses = ['border', 'border-dashed', 'rounded', 'p-3', 'bg-white']; // Update parent wrapper classes\n\n        (_product$classList = product.classList).remove.apply(_product$classList, wrapperClassesRemove);\n\n        (_product$classList2 = product.classList).add.apply(_product$classList2, wrapperClassesAdd); // Remove parent default content\n\n\n        product.innerHTML = ''; // Update inner wrapper classes\n\n        (_innerWrapper$classLi = innerWrapper.classList).add.apply(_innerWrapper$classLi, wrapperClassesRemove);\n\n        (_innerWrapper$classLi2 = innerWrapper.classList).add.apply(_innerWrapper$classLi2, additionalClasses); // Apply stored inner content into new inner wrapper\n\n\n        innerWrapper.innerHTML = innerContent; // Append new inner wrapper to parent wrapper\n\n        product.appendChild(innerWrapper); // Get product id\n\n        var productId = product.getAttribute('data-kt-ecommerce-edit-order-id');\n\n        if (e.target.checked) {\n          // Add product to selected product wrapper\n          target.appendChild(product);\n        } else {\n          // Remove product from selected product wrapper\n          var selectedProduct = target.querySelector('[data-kt-ecommerce-edit-order-id=\"' + productId + '\"]');\n\n          if (selectedProduct) {\n            target.removeChild(selectedProduct);\n          }\n        } // Trigger empty message logic\n\n\n        detectEmpty();\n      });\n    }); // Handle empty list message\n\n    var detectEmpty = function detectEmpty() {\n      // Select elements\n      var message = target.querySelector('span');\n      var products = target.querySelectorAll('[data-kt-ecommerce-edit-order-filter=\"product\"]'); // Detect if element is empty\n\n      if (products.length < 1) {\n        // Show message\n        message.classList.remove('d-none'); // Reset price\n\n        totalPrice.innerText = '0.00';\n      } else {\n        // Hide message\n        message.classList.add('d-none'); // Calculate price\n\n        calculateTotal(products);\n      }\n    }; // Calculate total cost\n\n\n    var calculateTotal = function calculateTotal(products) {\n      var countPrice = 0; // Loop through all selected prodcucts\n\n      products.forEach(function (product) {\n        // Get product price\n        var price = parseFloat(product.querySelector('[data-kt-ecommerce-edit-order-filter=\"price\"]').innerText); // Add to total\n\n        countPrice = parseFloat(countPrice + price);\n      }); // Update total price\n\n      totalPrice.innerText = countPrice.toFixed(2);\n    };\n  }; // Submit form handler\n\n\n  var handleSubmit = function handleSubmit() {\n    // Define variables\n    var validator; // Get elements\n\n    var form = document.getElementById('kt_ecommerce_edit_order_form');\n    var submitButton = document.getElementById('kt_ecommerce_edit_order_submit'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'payment_method': {\n          validators: {\n            notEmpty: {\n              message: 'Payment method is required'\n            }\n          }\n        },\n        'shipping_method': {\n          validators: {\n            notEmpty: {\n              message: 'Shipping method is required'\n            }\n          }\n        },\n        'order_date': {\n          validators: {\n            notEmpty: {\n              message: 'Order date is required'\n            }\n          }\n        },\n        'billing_order_address_1': {\n          validators: {\n            notEmpty: {\n              message: 'Address line 1 is required'\n            }\n          }\n        },\n        'billing_order_postcode': {\n          validators: {\n            notEmpty: {\n              message: 'Postcode is required'\n            }\n          }\n        },\n        'billing_order_state': {\n          validators: {\n            notEmpty: {\n              message: 'State is required'\n            }\n          }\n        },\n        'billing_order_country': {\n          validators: {\n            notEmpty: {\n              message: 'Country is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Handle submit button\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  // Enable submit button after loading\n                  submitButton.disabled = false; // Redirect to customers list page\n\n                  window.location = form.getAttribute(\"data-kt-redirect\");\n                }\n              });\n            }, 2000);\n          } else {\n            Swal.fire({\n              html: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      initSaveOrder();\n      handleSearchDatatable();\n      handleShippingForm();\n      handleProductSelect();\n      handleSubmit();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppEcommerceSalesSaveOrder.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/sales/save-order.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/ecommerce/sales/save-order.js"]();
/******/ 	
/******/ })()
;