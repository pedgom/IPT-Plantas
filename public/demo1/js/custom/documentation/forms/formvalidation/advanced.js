/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/forms/formvalidation/advanced.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/forms/formvalidation/advanced.js ***!
  \****************************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTFormValidationDemoAdvanced = function () {\n  // Private functions\n  var exampleAdvanced = function exampleAdvanced() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_advanced'); // Init daterangepicker --- for more info, please visit: https://www.daterangepicker.com/\n\n    $(\"#kt_daterangepicker\").daterangepicker(); // Init flatpickr --- for more info, please visit: https://flatpickr.js.org/\n\n    $(\"#kt_flatpickr\").flatpickr(); // Init tagify --- for more info, please visit: https://yaireo.github.io/tagify/\n\n    new Tagify(document.querySelector(\"#kt_tagify\"), {\n      whitelist: [\"Tag 1\", \"Tag 2\", \"Tag 3\", \"Tag 4\", \"Tag 5\", \"Tag 6\", \"Tag 7\", \"Tag 8\", \"Tag 9\", \"Tag 10\", \"Tag 11\", \"Tag 12\"],\n      maxTags: 6,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"tagify__inline__suggestions\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'daterangepicker_input': {\n          validators: {\n            notEmpty: {\n              message: 'Date range input is required'\n            }\n          }\n        },\n        'flatpickr_input': {\n          validators: {\n            date: {\n              format: 'YYYY-MM-DD',\n              message: 'The value is not a valid date'\n            },\n            notEmpty: {\n              message: 'Flatpickr input is required'\n            }\n          }\n        },\n        'avatar': {\n          validators: {\n            notEmpty: {\n              message: 'Please select an image'\n            },\n            file: {\n              extension: 'jpg,jpeg,png',\n              type: 'image/jpeg,image/png',\n              message: 'The selected file is not valid'\n            }\n          }\n        },\n        'select2_input': {\n          validators: {\n            notEmpty: {\n              message: 'Select2 input is required'\n            }\n          }\n        },\n        'tagify_input': {\n          validators: {\n            notEmpty: {\n              message: 'Tagify input is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Revalidate Select2 input. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"select2_input\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('select2_input');\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var exampleDateRangePicker = function exampleDateRangePicker() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_daterangepicker');\n    var element = $(\"#kt_daterangepicker\"); // Init daterangepicker --- for more info, please visit: https://www.daterangepicker.com/\n\n    element.daterangepicker({\n      autoUpdateInput: false\n    });\n    element.on('apply.daterangepicker', function (ev, picker) {\n      $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));\n    });\n    element.on('cancel.daterangepicker', function (ev, picker) {\n      $(this).val('');\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'daterangepicker_input': {\n          validators: {\n            notEmpty: {\n              message: 'Date range input is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_daterangepicker_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var exampleFlatpickr = function exampleFlatpickr() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_flatpickr'); // Init flatpickr --- for more info, please visit: https://flatpickr.js.org/\n\n    $(\"#kt_flatpickr\").flatpickr(); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'flatpickr_input': {\n          validators: {\n            date: {\n              format: 'YYYY-MM-DD',\n              message: 'The value is not a valid date'\n            },\n            notEmpty: {\n              message: 'Flatpickr input is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_flatpickr_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var exampleImageInput = function exampleImageInput() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_image_input'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'avatar': {\n          validators: {\n            notEmpty: {\n              message: 'Please select an image'\n            },\n            file: {\n              extension: 'jpg,jpeg,png',\n              type: 'image/jpeg,image/png',\n              message: 'The selected file is not valid'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_image_input_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var examplePassword = function examplePassword() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_password'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'current_password': {\n          validators: {\n            notEmpty: {\n              message: 'Current password is required'\n            }\n          }\n        },\n        'new_password': {\n          validators: {\n            notEmpty: {\n              message: 'The password is required'\n            },\n            callback: {\n              message: 'Please enter valid password',\n              callback: function callback(input) {\n                if (input.value.length > 0) {\n                  return validatePassword();\n                }\n              }\n            }\n          }\n        },\n        'confirm_password': {\n          validators: {\n            notEmpty: {\n              message: 'The password confirmation is required'\n            },\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"new_password\"]').value;\n              },\n              message: 'The password and its confirm are not the same'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_password_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var exampleSelect2 = function exampleSelect2() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_select2'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'select2_input': {\n          validators: {\n            notEmpty: {\n              message: 'Select2 input is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Revalidate Select2 input. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"select2_input\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('select2_input');\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_select2_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  var exampleTagify = function exampleTagify() {\n    // Define form element\n    var form = document.getElementById('kt_docs_formvalidation_tagify'); // Init tagify --- for more info, please visit: https://yaireo.github.io/tagify/\n\n    var tags = new Tagify(document.querySelector(\"#kt_tagify\"), {\n      whitelist: [\"Tag 1\", \"Tag 2\", \"Tag 3\", \"Tag 4\", \"Tag 5\", \"Tag 6\", \"Tag 7\", \"Tag 8\", \"Tag 9\", \"Tag 10\", \"Tag 11\", \"Tag 12\"],\n      maxTags: 6,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"tagify__inline__suggestions\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    });\n    tags.on(\"change\", function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('tagify_input');\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'tagify_input': {\n          validators: {\n            notEmpty: {\n              message: 'Tagify input is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Submit button handler\n\n    var submitButton = document.getElementById('kt_docs_formvalidation_tagify_submit');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          }\n        });\n      }\n    });\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      exampleDateRangePicker();\n      exampleFlatpickr();\n      exampleImageInput();\n      examplePassword();\n      exampleSelect2();\n      exampleTagify();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFormValidationDemoAdvanced.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/formvalidation/advanced.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/forms/formvalidation/advanced.js"]();
/******/ 	
/******/ })()
;